h1. FMQ

h2. -> 'Free Message Queue'

h2. What

The project implements a queue system with a server and some client apis.

The server is a rack server that holds REST-named queues, so that the implementation can be changed rapidly. You can GET, POST, DELETE, HEAD queue messages using the normal HTTP requests. The system itself uses a configuration file (*config.ru*) to setup queues at startup or even at runtime. The queue implementations can be changed or you can develop own queues with ease. 

For an simple administration try out the integrated ajax based web interface.

The client apis are implemented using the HTTP protocol, so that you can use even curl to receive messages. A client library for ruby is implemented right now, other languages will follow.

The queue itself is a RESTful url like @http://localhost:5884/myQueueName/@ or @http://localhost:5884/myApplication/myQueueName/@. If you do a GET request to this url with a web browser you will receive one message from the queue.

If you need some help in getting thinks running watch the "screencasts":http://fmq.ruby-consult.de/FMQ/FMQ/rss.xml.

h2. Features

* FIFO message stores
* easy setup and maintenance of system (rack)
* using http for communication
* changeable queue implementation
* ruby client lib
* simple ajax admin interface
* server is based on rack server stack
* "queues":#queues for different purposes
* **develop** your own queues (very fast)

h2. Installing

<pre>sudo gem install fmq</pre>

h2. First steps

After installing the gem you can start by creating a project:

<pre>fmq create my_project_name</pre>

next step is to change to the folder and start the FMQ server:

<pre>cd my_project_name
rackup -p 5884</pre>

The server will start and host a admin interface on "http://localhost:5884/admin/index.html":http://localhost:5884/admin/index.html.

Have a look at "rDoc":http://fmq.rubyforge.org/rdoc/ to see how to use the "client API":http://fmq.rubyforge.org/rdoc/classes/FreeMessageQueue/ClientQueue.html and the queue configuration on the server.

h3. Configuration

If you have created your FMQ project you will find a *config.ru* file, that contains the configuration. But you can customize it in any way you like. Here is an example for a very basic setup:

<pre>
require "fmq"

queue_manager = FreeMessageQueue::QueueManager.new() do
  setup_queue "/mail_box/your_name" do |q|
    q.max_messages = 10000
    q.max_size = 10.mb
  end
end

run FreeMessageQueue::Server.new(queue_manager)</pre>

h3. Creating your own queues

You can easyly implement your own queues by extending the *BaseQueue* class:

<pre>class MyTestQueue < FreeMessageQueue::BaseQueue
  def put(message)
    puts "INCOMMING: #{message.payload}"
  end
  
  def poll
    FreeMessageQueue::Message.new "Hello World", "text/plain" do |m|
      m.option["Time"] = Time.now
    end
  end
end</pre>

Ok, so if you have special needs or need a queue that processes a message in different ways it is easy to do...

h2(#queues). Queues that ship with FMQ

<a class="queue" href="/rdoc/classes/FreeMessageQueue/FilePersistentQueue.html"><img src="images/file_persistent_queue.jpg" alt="FilePersistentQueue"></a><a class="queue" href="/rdoc/classes/FreeMessageQueue/RoundRobinQueue.html"><img src="images/round_robin_queue.jpg" alt="RoundRobinQueue"></a><a class="queue" href="/rdoc/classes/FreeMessageQueue/ForwardQueue.html"><img src="images/forward_queue.jpg" alt="ForwardQueue"></a><a class="queue" href="/rdoc/classes/FreeMessageQueue/SyncronizedQueue.html"><img src="images/synchronized_queue.jpg" alt="SynchronizedQueue"></a><a class="queue" href="/rdoc/classes/FreeMessageQueue/FileQueue.html"><img src="images/file_queue.jpg" alt="FileQueue"></a>

h2. Git, patches, forks and all that stuff

If you want to clone the git repository use the command below. Patches, forks and feature requests are welcome, please send them to __fmq-3z (at) gmx.net__.

<pre>git clone git://github.com/threez/fmq.git</pre>

or if you are behind a http proxy

<pre>git clone http://github.com/threez/fmq.git</pre>

h3. Build and test instructions

after cloning the repository you can 

<pre>cd fmq</pre>

to the directory. But in order to run the tests you have to start a FMQ server first:

<pre>cd default-server
rackup -p 5884</pre>

then run the tests

<pre>rake test</pre>

h2. Loadtest

To check the performance we have done a load test. The system under test was a 2 GB dual-core intel 1.8 Ghz with 100 Mbit/s LAN and Ruby 1.8.6.
In the test we simulate 20 applications (with 20 threads). Each of this applications did 2 POSTs and 1 GET request for 30min. The POST requests where about 1KB.</p>

This are the results (from 2008-06-10; Mongrel):

<table style="width: 100%;" id="loadtest">
	<tr>
		<th>Test duration:</th>
		<td>30:01 min</td>
	</tr>
	<tr>
		<th>Average response time:</th>
		<td>36 ms</td>
	</tr>
	<tr>
		<th>Passed Transactions:</th>
		<td style="color: green;">862203</td>
	</tr>
	<tr>
		<th>Failed (because of connection timeout):</th>
		<td style="color: red;">285</td>
	</tr>
	<tr>
		<th>Transactions per second:</th>
		<td>476,1</td>
	</tr>
	<tr>
		<th>Transactions per minute:</th>
		<td>28.749,60</td>
	</tr>
	<tr>
		<th>Transactions per hour:</th>
		<td>1.724.976</td>
	</tr>

</table>

h2. License

This code is free to use under the terms of the GNU GENERAL PUBLIC license (v3). 

